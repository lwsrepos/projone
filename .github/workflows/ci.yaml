name: Docker
on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      go: ${{ steps.changes.outputs.go }}
      zig: ${{ steps.changes.outputs.zig }}
      python: ${{ steps.changes.outputs.python }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            rust:
              - 'functions/rs/**'
            go:
              - 'functions/go/**'
            zig:
              - 'functions/zig/**'
            python:
              - 'functions/python/**'

  build-rust:
    needs: detect-changes
    if: needs.detect-changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: current-repo

      - name: Checkout litefunctions repository
        uses: actions/checkout@v4
        with:
          repository: ashupednekar/litefunctions
          path: litefunctions

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Rust Docker image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          RUST_FILE=$(find current-repo/functions/rs -name "*.rs" -type f | head -1 | xargs basename -s .rs)
          IMG_TAG=${{ env.REGISTRY }}/${{ env.REPO_NAME }}/runtime-rust-${{ env.REPO_NAME }}-${RUST_FILE}:latest  #${{ github.sha }}  
          cd litefunctions
          docker build -t ${IMG_TAG} \
            runtimes/rust/ \
            -f build/runtimes/Dockerfile.rust \
            --build-arg PROJECT=${REPO_NAME} \
            --build-arg NAME=${RUST_FILE} \
            --build-arg GIT_TOKEN=${{ secrets.GITHUB_TOKEN }}
          
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            docker push ${IMG_TAG} 
          fi

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}-rust:${{ github.sha }}
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_TAG} | cut -d'@' -f2)
          cosign sign --yes ${IMAGE_TAG}@${DIGEST}

  build-go:
    needs: detect-changes
    if: needs.detect-changes.outputs.go == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: current-repo

      - name: Checkout litefunctions repository
        uses: actions/checkout@v4
        with:
          repository: ashupednekar/litefunctions
          path: litefunctions

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Go Docker image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          GO_FILE=$(find current-repo/functions/go -name "*.go" -type f | head -1 | xargs basename -s .go)
          
          cd litefunctions
          docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}-go:${{ github.sha }} \
            runtimes/go/ \
            -f build/runtimes/Dockerfile.go \
            --build-arg PROJECT=${REPO_NAME} \
            --build-arg NAME=${GO_FILE} \
            --build-arg GIT_TOKEN=${{ secrets.GITHUB_TOKEN }}
          
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}-go:${{ github.sha }}
          fi

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          IMAGE_TAG: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}-go:${{ github.sha }}
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE_TAG} | cut -d'@' -f2)
          cosign sign --yes ${IMAGE_TAG}@${DIGEST}
